pipeline {
    agent any
    environment {
        POSTGRES_SECRET = credentials('jenkins-postgres-credentials')
    }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the Git repository
                    git branch: 'main', url: 'https://github.com/DanyaHDanny/tafordqe'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    // Create a virtual environment
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r "PyTest DQ Framework Result/requirements.txt"
                    '''
                }
            }
        }
        stage('Run PyTest') {
            steps { catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                script {
                    // Activate the virtual environment, set PYTHONPATH, and run the script
                    sh '''
                    # Navigate to the specific folder where the tests are located
                    cd "PyTest DQ Framework Result/"

                    # Activate the virtual environment
                    . ../venv/bin/activate

                    # Set the PYTHONPATH to the workspace
                    export PYTHONPATH=$WORKSPACE

                    # Run pytest with the specified options
                    pytest tests -m "parquet_data" \
                        --db_host="postgres" \
                        --db_port="5432" \
                        --db_name="mydatabase" \
                        --db_user=$POSTGRES_SECRET_USR \
                        --db_password=$POSTGRES_SECRET_PSW \
                        --html=html_report/report.html
                '''
                }
            }}
        }
        stage('Archive Test Report') {
            steps {
                // Archive the entire html_report directory, including assets
                archiveArtifacts artifacts: 'PyTest DQ Framework Result/html_report/**', allowEmptyArchive: true

                // Publish the HTML report
                publishHTML(target: [
                    allowMissing: false,  // Fail the pipeline if the report is missing
                    keepAll: true,        // Keep all reports from previous runs
                    reportDir: 'PyTest DQ Framework Result/html_report', // Correct directory path
                    reportFiles: 'index.html',                          // Entry point file
                    reportName: 'HTML Test Report'                      // Display name in Jenkins
                ])
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}